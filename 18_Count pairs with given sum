# Method 1: TC: o(n^2), SC: o(1)


#include <bits/stdc++.h>
using namespace std;

class Solution{   
public:
    int getPairsCount(int arr[], int n, int k) {
        int c=0;
        for(int i=0;i<n-1;i++)
        {
            for(int j=i+1;j<n;j++)
            {
                if(arr[i]+arr[j]==k)
                c++;
            }
        }
        return c;
    }
};

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n, k;
        cin >> n >> k;
        int arr[n];
        for (int i = 0; i < n; i++) {
            cin >> arr[i];
        }
        Solution ob;
        auto ans = ob.getPairsCount(arr, n, k);
        cout << ans << "\n";
    }
    
    return 0;
}



# Method 2: TC: o(n), SC: o(n)


#include <bits/stdc++.h>
using namespace std;

class Solution{   
public:
    int getPairsCount(int arr[], int n, int k) {
        unordered_map<int,int> s;
        int i,t,c=0;
        for(i=0;i<n;i++)
        s[arr[i]]++;
        for(i=0;i<n;i++)
        {
            if(s.count(k-arr[i]))
            {
                t=s[k-arr[i]];
                if(arr[i]==(k-arr[i]))
                c+=t-1;
                else
                c+=t;
                s[arr[i]]--;
                arr[i]= -1000000;
            }
            
        }
        return c;
    }
};

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n, k;
        cin >> n >> k;
        int arr[n];
        for (int i = 0; i < n; i++) {
            cin >> arr[i];
        }
        Solution ob;
        auto ans = ob.getPairsCount(arr, n, k);
        cout << ans << "\n";
    }
    
    return 0;
}
