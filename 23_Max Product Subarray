# Method 1:


#include <bits/stdc++.h>

using namespace std;

class Solution{
public:

	// Function to find maximum product subarray
	long long maxProduct(vector<int> arr, int n) {
	    int i;
	  long long int maxi=INT_MIN;
	  long long int current=1;
	  for(int i=0;i<n;i++)
	  {
	      current=current*arr[i];
	      maxi=max(maxi,current);
	      if(arr[i]==0)
	      current=1;
	  }
	  current=1;
	  for(int i=n-1;i>=0;i--)
	  {
	      current=current*arr[i];
	      maxi=max(maxi,current);
	      if(arr[i]==0)
	      current=1;
	  }
	  return maxi;
	}
};

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n, i;
        cin >> n;
        vector<int> arr(n);
        for (i = 0; i < n; i++) {
            cin >> arr[i];
        }
        Solution ob;
        auto ans = ob.maxProduct(arr, n);
        cout << ans << "\n";
    }
    
    
    
# Method 2:  The test cases are generated so that the answer will fit in a 32-bit integer. 
    
    
    class Solution {
public:
    int maxProduct(vector<int>& nums) {
        int i;
	   int mi,ma,maxi;
	   mi=nums[0],ma=nums[0],maxi=nums[0];
	   for(i=1;i<nums.size();i++)
	   {
	       if(nums[i]<0)
	       swap(mi,ma);
	       mi= min (nums[i],mi*nums[i]);
	       ma=max(nums[i],ma*nums[i]);
	       maxi=max(maxi,ma);
	   }
	   return maxi;
    }
};
    return 0;
}
