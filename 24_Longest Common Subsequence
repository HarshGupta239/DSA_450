# Method 1:  TC: o(nlogn), SC: o(1)


#include <bits/stdc++.h>
using namespace std;

class Solution{
  public:
    // arr[] : the input array
    // N : size of the array arr[]
    
    //Function to return length of longest subsequence of consecutive integers.
    int findLongestConseqSubseq(int arr[], int N)
    {
        int i,k=0,c=0;
     sort(arr,arr+N);
     for(i=0;i<N;i++)
     {
         if(arr[i+1]-arr[i]==1)
         {
             c++;
         }
         else if(arr[i+1]-arr[i]==0)
         {
             continue;
         }
         else
         {
             k=max(k,c);
             c=0;
         }
     }
     return k+1;
    }
};

int main()
{
 int  t,n,i,a[100001];
 cin>>t;
 while(t--)
 {
  cin>>n;
  for(i=0;i<n;i++)
  cin>>a[i];
  Solution obj;
  cout<<obj.findLongestConseqSubseq(a, n)<<endl;
 }
      
    return 0;
}



# Method 2:  TC: o(n), SC: o(n)


#include <bits/stdc++.h>
using namespace std;

class Solution{
  public:
    // arr[] : the input array
    // N : size of the array arr[]
    
    //Function to return length of longest subsequence of consecutive integers.
    int findLongestConseqSubseq(int arr[], int N)
    {
      int count[100001]={0},i,c=0,k=INT_MIN;
      for(i=0;i<N;i++)
      count[arr[i]]++;
      for(i=0;i<100001;i++)
      {
          if(count[i]>=1)
          c++;
          else
              c=0;
          k=max(k,c);
      }
      return k;
    }
};

int main()
{
 int  t,n,i,a[100001];
 cin>>t;
 while(t--)
 {
  cin>>n;
  for(i=0;i<n;i++)
  cin>>a[i];
  Solution obj;
  cout<<obj.findLongestConseqSubseq(a, n)<<endl;
 }
      
    return 0;
}
