# Method 1:  TC: o(n^2), SC: o(n)


#include <bits/stdc++.h>
using namespace std;

class Solution{
    public:
    //Function to find if there exists a triplet in the 
    //array A[] which sums up to X.
    bool find3Numbers(int A[], int n, int X)
    {
        int i,j,k,l,t;
        int count[100001]={0};
        for(i=0;i<n;i++)
        count[A[i]]++;
        for(i=0;i<n-2;i++)
        {
            for(j=i+1;j<n-1;j++)
            {
                l= X-(A[i]+A[j]);
                if(l>0)
                if(count[l]>=1)
                {
                    t=count[l];
                    if(A[i]==l)
                    t=t-1;
                    if(A[j]==l)
                    t=t-1;
                    if(t>=1)
                    return 1;
                }
            }
        }
        return 0;
    }

};

int main()
{
	int T;
	cin>>T;
	while(T--)
	{
		int n,X;
		cin>>n>>X;
		int i,A[n];
		for(i=0;i<n;i++)
			cin>>A[i];
		Solution ob;
        cout <<  ob.find3Numbers(A, n, X) << endl;
    }
}



# Method 2: TC: o(n^2), SC:o(1)


#include <bits/stdc++.h>
using namespace std;

class Solution{
    public:
    //Function to find if there exists a triplet in the 
    //array A[] which sums up to X.
    
    // Sort 
    // Two Pointer Approach
    bool find3Numbers(int A[], int n, int X)
    {
        sort(A, A+n);
        for(int i = 0; i< n; i++){
            int y = X-A[i];
            int low = i+1 , high = n-1;
            while(low < high){
            if(A[low] + A[high] == y)
              return 1;
            else if(A[low] + A[high] > y)
              high--;
            else if(A[low] + A[high] < y)
              low++;
            }
        }
        return 0;
    }

};

int main()
{
	int T;
	cin>>T;
	while(T--)
	{
		int n,X;
		cin>>n>>X;
		int i,A[n];
		for(i=0;i<n;i++)
			cin>>A[i];
		Solution ob;
        cout <<  ob.find3Numbers(A, n, X) << endl;
    }
}
